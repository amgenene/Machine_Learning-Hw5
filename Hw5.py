# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1eFYynn9eBGX6cwjGoYwC2Jyx7CDz5F9A
"""

from google.colab import drive
drive.mount('/content/drive')

import numpy as np
import sys
import random
from skimage.transform import AffineTransform, warp
from skimage import data, color, io
from skimage.transform import resize
from skimage.transform import rescale, downscale_local_mean
np.set_printoptions(threshold=sys.maxsize)

import matplotlib.patches as patches
import matplotlib.pyplot as plt
from skimage import data
from skimage.transform import rotate

def reshapeAndAppend1s (faces):
    faces = faces.T
    ones = np.ones((faces.shape[1]))
    faces = np.vstack((faces, ones))
    return faces

def Center(Xte):
#   Xte = Xte.T
  print(Xte.shape)
  mu = np.mean(Xte, axis=1)
  Xtilde = Xte.T - mu
  return Xtilde.T

def compute_eigen_pairs(Xtilde):
  Eigen_vectors = np.linalg.eig(Xtilde.dot(Xtilde.T))
  Eigen_values = Eigen_vectors[0]
  Eigen_vectors = Eigen_vectors[1]
  return Eigen_vectors,Eigen_values

def compute_P(eigen_vectors, eigenvalues, Xtilde):
  eigen_vectors = eigen_vectors[np.argsort(eigenvalues)]
  eigen_vectors = eigen_vectors[::-1]
  P1 = Xtilde.T.dot(eigen_vectors[:, 0])
  P2 = Xtilde.T.dot(eigen_vectors[:, 1])
  print(P1.shape, P2.shape)
  return P1, P2

def loadData(which):
    faces = reshapeAndAppend1s(np.load("small_mnist_{}_images.npy".format(which)))
    labels = np.load("small_mnist_{}_labels.npy".format(which))
    return faces, labels

testingNumbers, testingLabels = loadData("test")
    trainingNumbers, trainingLabels = loadData("train")
    Xtilde = Center(testingNumbers)
    eigen_vectors, eigenvalues = compute_eigen_pairs(Xtilde)
    P1, P2 = compute_P(eigen_vectors, eigenvalues, Xtilde)
    #c=testingLabels.argmax(axis=1)
    plt.scatter(P1, P2, s=1, c=testingLabels.argmax(axis=1), cmap="viridis")
    plt.show
#     softmaxRegression_original_dataset(trainingNumbers, trainingLabels, testingNumbers, testingLabels)
#     softmaxRegression_augmented_data(trainingNumbers, trainingLabels,
#                                       testingNumbers, testingLabels)